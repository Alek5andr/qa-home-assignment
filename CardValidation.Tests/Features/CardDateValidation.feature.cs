// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CardValidation.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CardDateValidationFeature : object, Xunit.IClassFixture<CardDateValidationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public CardDateValidationFeature(CardDateValidationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Card Date Validation", "  As a payment processing system\r\n  I want to validate credit card expiration dat" +
                    "es\r\n  So that only valid future dates are accepted", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("the card validation service is available at \"https://localhost:7135/CardValidatio" +
                    "n/card/credit/validate\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Valid future dates should be accepted")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Date Validation")]
        [Xunit.TraitAttribute("Description", "Valid future dates should be accepted")]
        [Xunit.InlineDataAttribute("12/2025", new string[0])]
        [Xunit.InlineDataAttribute("01/2026", new string[0])]
        [Xunit.InlineDataAttribute("12/25", new string[0])]
        [Xunit.InlineDataAttribute("01/26", new string[0])]
        [Xunit.InlineDataAttribute("06/2030", new string[0])]
        [Xunit.InlineDataAttribute("12/30", new string[0])]
        public async System.Threading.Tasks.Task ValidFutureDatesShouldBeAccepted(string date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("date", date);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Valid future dates should be accepted", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table5 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table5.AddRow(new string[] {
                            "number",
                            "4111111111111111"});
                table5.AddRow(new string[] {
                            "date",
                            string.Format("{0}", date)});
                table5.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table5, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should indicate payment system type \"Visa\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Invalid date formats should return validation error")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Date Validation")]
        [Xunit.TraitAttribute("Description", "Invalid date formats should return validation error")]
        [Xunit.InlineDataAttribute("13/2025", new string[0])]
        [Xunit.InlineDataAttribute("00/2025", new string[0])]
        [Xunit.InlineDataAttribute("12/202", new string[0])]
        [Xunit.InlineDataAttribute("12/20255", new string[0])]
        [Xunit.InlineDataAttribute("2025/12", new string[0])]
        [Xunit.InlineDataAttribute("12-2025", new string[0])]
        [Xunit.InlineDataAttribute("12.2025", new string[0])]
        [Xunit.InlineDataAttribute("12 2025", new string[0])]
        [Xunit.InlineDataAttribute("Dec/2025", new string[0])]
        [Xunit.InlineDataAttribute("12/Dec", new string[0])]
        [Xunit.InlineDataAttribute("invalid", new string[0])]
        [Xunit.InlineDataAttribute("1/2025", new string[0])]
        [Xunit.InlineDataAttribute("12/5", new string[0])]
        public async System.Threading.Tasks.Task InvalidDateFormatsShouldReturnValidationError(string date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("date", date);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Invalid date formats should return validation error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table6 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table6.AddRow(new string[] {
                            "number",
                            "4111111111111111"});
                table6.AddRow(new string[] {
                            "date",
                            string.Format("{0}", date)});
                table6.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table6, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain error message \"Wrong date\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Past dates should return validation error")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Date Validation")]
        [Xunit.TraitAttribute("Description", "Past dates should return validation error")]
        [Xunit.InlineDataAttribute("01/2020", new string[0])]
        [Xunit.InlineDataAttribute("12/2023", new string[0])]
        [Xunit.InlineDataAttribute("06/20", new string[0])]
        [Xunit.InlineDataAttribute("01/24", new string[0])]
        public async System.Threading.Tasks.Task PastDatesShouldReturnValidationError(string date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("date", date);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Past dates should return validation error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table7 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table7.AddRow(new string[] {
                            "number",
                            "4111111111111111"});
                table7.AddRow(new string[] {
                            "date",
                            string.Format("{0}", date)});
                table7.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table7, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain error message \"Wrong date\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Empty date should return required field error")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Date Validation")]
        [Xunit.TraitAttribute("Description", "Empty date should return required field error")]
        public async System.Threading.Tasks.Task EmptyDateShouldReturnRequiredFieldError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Empty date should return required field error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table8 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table8.AddRow(new string[] {
                            "number",
                            "4111111111111111"});
                table8.AddRow(new string[] {
                            "date",
                            ""});
                table8.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table8, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain error message \"Date is required\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Missing date field should return required field error")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Date Validation")]
        [Xunit.TraitAttribute("Description", "Missing date field should return required field error")]
        public async System.Threading.Tasks.Task MissingDateFieldShouldReturnRequiredFieldError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Missing date field should return required field error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table9 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table9.AddRow(new string[] {
                            "number",
                            "4111111111111111"});
                table9.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table9, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain error message \"Date is required\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CardDateValidationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CardDateValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
