// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CardValidation.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CardNumberValidationFeature : object, Xunit.IClassFixture<CardNumberValidationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public CardNumberValidationFeature(CardNumberValidationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Card Number Validation", "  As a payment processing system\r\n  I want to validate credit card numbers\r\n  So " +
                    "that only valid card numbers are accepted", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("the card validation service is available at \"https://localhost:7135/CardValidatio" +
                    "n/card/credit/validate\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Valid card numbers should return correct payment system type")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Valid card numbers should return correct payment system type")]
        [Xunit.InlineDataAttribute("4111111111111111", "Visa", new string[0])]
        [Xunit.InlineDataAttribute("4000000000000002", "Visa", new string[0])]
        [Xunit.InlineDataAttribute("5555555555554444", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("5105105105105100", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("2221000000000009", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("2720999999999996", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("371449635398431", "AmericanExpress", new string[0])]
        [Xunit.InlineDataAttribute("378282246310005", "AmericanExpress", new string[0])]
        public async System.Threading.Tasks.Task ValidCardNumbersShouldReturnCorrectPaymentSystemType(string cardNumber, string paymentSystem, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cardNumber", cardNumber);
            argumentsOfScenario.Add("paymentSystem", paymentSystem);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Valid card numbers should return correct payment system type", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table10 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table10.AddRow(new string[] {
                            "number",
                            string.Format("{0}", cardNumber)});
                table10.AddRow(new string[] {
                            "date",
                            "12/2025"});
                table10.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table10, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync(string.Format("the response should indicate payment system type \"{0}\"", paymentSystem), ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Invalid card numbers should return validation error")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Invalid card numbers should return validation error")]
        [Xunit.InlineDataAttribute("1234567890123456", new string[0])]
        [Xunit.InlineDataAttribute("6011111111111117", new string[0])]
        [Xunit.InlineDataAttribute("3530111333300000", new string[0])]
        [Xunit.InlineDataAttribute("4111-1111-1111-1111", new string[0])]
        [Xunit.InlineDataAttribute("411111111111111a", new string[0])]
        [Xunit.InlineDataAttribute("41111111111111111", new string[0])]
        public async System.Threading.Tasks.Task InvalidCardNumbersShouldReturnValidationError(string cardNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cardNumber", cardNumber);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Invalid card numbers should return validation error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table11 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table11.AddRow(new string[] {
                            "number",
                            string.Format("{0}", cardNumber)});
                table11.AddRow(new string[] {
                            "date",
                            "12/2025"});
                table11.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table11, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain error message \"Wrong number\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Empty card number should return required field error")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Empty card number should return required field error")]
        public async System.Threading.Tasks.Task EmptyCardNumberShouldReturnRequiredFieldError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Empty card number should return required field error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table12 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table12.AddRow(new string[] {
                            "number",
                            ""});
                table12.AddRow(new string[] {
                            "date",
                            "12/2025"});
                table12.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table12, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain error message \"Number is required\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Missing card number should return required field error")]
        [Xunit.TraitAttribute("FeatureTitle", "Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Missing card number should return required field error")]
        public async System.Threading.Tasks.Task MissingCardNumberShouldReturnRequiredFieldError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Missing card number should return required field error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                Reqnroll.Table table13 = new Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "owner",
                            "John Doe"});
                table13.AddRow(new string[] {
                            "date",
                            "12/2025"});
                table13.AddRow(new string[] {
                            "cvv",
                            "123"});
                await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table13, "Given ");
                await testRunner.WhenAsync("I send the validation request", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain error message \"Number is required\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CardNumberValidationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CardNumberValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
