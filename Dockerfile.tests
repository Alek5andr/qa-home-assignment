# Use official .NET SDK image
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS test-environment

# Set working directory
WORKDIR /app

# Copy project files
COPY . .

# Restore dependencies
RUN dotnet restore

# Install global tool for report generation
RUN dotnet tool install --global dotnet-reportgenerator-globaltool

# Add global tools path to PATH
ENV PATH="${PATH}:/root/.dotnet/tools"

# Create directories for test results and reports
RUN mkdir -p /app/test-results/unit-tests && \
    mkdir -p /app/test-results/integration-tests && \
    mkdir -p /app/coverage && \
    mkdir -p /app/coverage/html-report

# Build the project
RUN dotnet build --configuration Release --no-restore

# Create script to run tests and install certificate
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Check and install certificate from shared volume\n\
echo "=== Install certificate ==="\n\
if [ -f "/shared-volume/aspnetapp.pfx" ] && [ -f "/shared-volume/aspnetapp.crt" ]; then\n\
    echo "API certificate found, installing trust..."\n\
    # Add certificate to trusted store\n\
    cp /shared-volume/aspnetapp.crt /usr/local/share/ca-certificates/cardvalidation-api.crt\n\
    update-ca-certificates\n\
    \n\
    # Install certificate for .NET\n\
    dotnet dev-certs https --clean\n\
    dotnet dev-certs https -ep /shared-volume/aspnetapp.pfx -p password --trust\n\
    echo "Certificate installed successfully!"\n\
else\n\
    echo "API certificate not found, creating own..."\n\
    dotnet dev-certs https --clean\n\
    dotnet dev-certs https --trust\n\
fi\n\
\n\
# Set environment variables to allow self-signed certificates\n\
export DOTNET_SYSTEM_NET_HTTP_SOCKETSHTTPHANDLER_HTTP2UNENCRYPTEDSUPPORT=true\n\
export DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=false\n\
\n\
echo "=== Run Unit tests ==="\n\
dotnet test CardValidation.Tests \\\n\
    --configuration Release \\\n\
    --no-build \\\n\
    --filter "CardValidationServiceTests" \\\n\
    --logger "trx;LogFileName=unit-tests.trx" \\\n\
    --results-directory ./test-results/unit-tests \\\n\
    --collect:"XPlat Code Coverage" \\\n\
    --settings coverlet.runsettings || echo "Unit tests completed with an error"\n\
\n\
echo "=== Run integration BDD tests ==="\n\
dotnet test CardValidation.Tests \\\n\
    --configuration Release \\\n\
    --no-build \\\n\
    --filter "CardValidation.Tests.Features" \\\n\
    --logger "trx;LogFileName=integration-tests.trx" \\\n\
    --results-directory ./test-results/integration-tests || echo "Integration tests completed with an error"\n\
\n\
echo "=== Merge coverage results ==="\n\
# Copy all coverage files into common directory\n\
find ./test-results -name "coverage.cobertura.xml" -exec cp {} ./coverage/ \\;\n\
\n\
echo "=== Generate HTML report ==="\n\
reportgenerator \\\n\
    -reports:"./coverage/**/coverage.cobertura.xml" \\\n\
    -targetdir:"./coverage/html-report" \\\n\
    -reporttypes:Html \\\n\
    -verbosity:Info || echo "Report generation completed with a warning"\n\
\n\
echo "=== Test results ==="\n\
echo "Unit tests: ./test-results/unit-tests/"\n\
echo "Integration tests: ./test-results/integration-tests/"\n\
echo "Coverage HTML report: ./coverage/html-report/index.html"\n\
\n\
# Show brief statistics\n\
if [ -f "./coverage/html-report/index.html" ]; then\n\
    echo "HTML report created successfully"\n\
    ls -la ./coverage/html-report/\n\
else\n\
    echo "Error creating HTML report"\n\
fi\n\
' > /app/run-tests.sh && chmod +x /app/run-tests.sh

# Create code coverage settings file
RUN echo '<?xml version="1.0" encoding="utf-8"?>\n\
<RunSettings>\n\
  <DataCollectionRunSettings>\n\
    <DataCollectors>\n\
      <DataCollector friendlyName="XPlat code coverage">\n\
        <Configuration>\n\
          <Format>cobertura</Format>\n\
          <Exclude>[*.Tests]*,[*]*.Program,[*]*.Startup</Exclude>\n\
          <ExcludeByAttribute>Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute</ExcludeByAttribute>\n\
          <ExcludeByFile>**/Migrations/**</ExcludeByFile>\n\
          <IncludeDirectory>../CardValidation.Core/**</IncludeDirectory>\n\
        </Configuration>\n\
      </DataCollector>\n\
    </DataCollectors>\n\
  </DataCollectionRunSettings>\n\
</RunSettings>' > /app/coverlet.runsettings

# Export ports (if needed for integration tests)
EXPOSE 7135

# Set default command
CMD ["/app/run-tests.sh"]